= オブジェクト指向で目指すものと目指さないもの

//flushright{
虎の穴ラボ 河野裕隆
//}

虎の穴ラボでリードエンジニアとマネージメントをやっている河野です。

オブジェクト指向との向き合い方を目指すものと目指さないものという視点で書きます。100%私見です。

== オブジェクト指向とはなにか

まず前提として、オブジェクト指向について定義する必要があります。
今回の話では単純に「必要な各要素をオブジェクト(モノ)として扱い、モデリングする手法」として進めます。
一方で「オブジェクト間のメッセージングによりシステムを構築する手法」という視点は少し薄い内容となります。

=== 設計/分析/プログラミング/言語

「オブジェクト指向」は適用するフェーズの接頭語として用いる例があります。
具体的には「オブジェクト指向設計」や「オブジェクト指向プログラミング」です。

章のタイトルとして「設計/分析/プログラミング/言語」としましたが、「言語」だけ少し趣きが異なります。
「オブジェクト指向言語」は、意味を開くと「オブジェクト指向で書くことができる言語」ということができるかと思います。
言葉尻を捉えれば、「オブジェクト指向以外でも書こうと思えば書ける言語」ということです。
つまり、Javaなどのオブジェクト指向言語で書くからオブジェクト指向とはならず、オブジェクト指向で書くからオブジェクト指向なわけです。
書いてて少し混乱してきましたね。  

では「オブジェクト指向で書く」とはどういうことでしょうか？
これは最初に決めた定義に則り、「必要な各要素をオブジェクト(モノ)として扱い、モデリングする手法を用いてプログラムを書く」ということになります。

=== オブジェクト指向で書くために必要なこと

本来であれば「オブジェクト指向開発方法論」を学び、「オブジェクト指向分析」、「オブジェクト指向設計」を経て「オブジェクト指向プログラミング」を実施する必要がありますが、そこまで厳密に進めていないところもあるかと思います。
つまり、**我々は雰囲気でオブジェクト指向をやっている**ような状態です(しっかり分析、設計を経て開発を行っている皆様、申し訳ありません)。  
また時間をかけて設計するケースでも、オブジェクトに落とし込むことが難しいことがあります。
例えばWebサービスの開発で`UserController`を作ったり、`OrderService`を作ったり、あるいは`DateUtil`を作ったりしてしまう場合です。

ControllerやUtilはモノではなく、観測できません。にも関わらず厳密なオブジェクト指向で開発していると主張するのは一種の「雰囲気でオブジェクト指向やっている状態」だと思います（前述のモジュールがオブジェクト指向から外れていることを認識して進めている場合、この限りではありません）。

この雰囲気でオブジェクト指向をやっている状態を**雰囲気OO**と名付け、その目的を明確にしていきます。

==== 余談：DDDと雰囲気OO

ここ数年で技術イベント等でもよく聞かれるようになったドメイン駆動設計。

概念としてはオブジェクト指向のために限定された設計手法ではありませんが、オブジェクト指向と組み合わせることが多い考え方です。
何をもってオブジェクトとするかを「ドメインエキスパート」らによる「ユビキタス言語」を介してモデリングし、設計、開発していくさまは、まさしくオブジェクト指向分析/設計そのものと言えます。

オブジェクトを考えるためにはオブジェクトを観測する主体が必要であり、量子論で交わされた議論をなぞると「月を見ていないとき、月は存在しない」のです。

一方でサービスの利用などオブジェクトと呼び得ないものも登場し、厳密的なオブジェクト指向とは乖離します。

DDDが注目されるようになった背景として、オブジェクト指向の分析/設計がやや軽視されてきたカウンターのようなものがあるのではないかと個人的には考えています。前段の言葉を用いると「雰囲気OOとDDDは相容れない」ということです。

== 雰囲気OOを用いる目的、目指す場所

まず「お断り」として、雰囲気OOは悪ではありませんし、したがって本記事で処方箋を出すつもりもありません。
ではなぜ雰囲気OOは「悪ではない」と言えるのでしょうか？
