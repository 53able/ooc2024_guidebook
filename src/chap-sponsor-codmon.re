= DDDで迷わないために、チームの正解を見つける

//flushright{
株式会社コドモン　高橋 宗弘
//}

//note{
こちらの記事はコドモン開発ブログの記事を転載、一部加筆・訂正したものです
https://tech.codmon.com/entry/2022/06/28/134446
//}

こんにちは、登降園・請求管理機能@<fn>{1}チーム所属の髙橋です。

コドモンではソフトウェアの品質を向上させて、価値提供のスピードをあげるために技術的負債の解消を進めています。

独立性が高い機能については、順次リプレイスして技術的負債の解消と陳腐化した技術の刷新を進めていますが、複雑度が高くコードベースが大きい機能については、様々な制約からすぐにリプレイスに着手することができません。

そこで登降園・請求管理機能チームにおいては、課題を整理しつつ段階的にリプレイスに向かう方法を取ろうとしています。
この記事は 2021 年からの 1 年間で集中的に取り組んだ請求管理機能の技術的負債解消の取り組みについて説明しています。

== 目次

 * 請求管理機能の状況
 * リプレイスに向けた作戦
 ** 一旦モジュラモノリスを目指す
 ** チーム内での知見の共有、議論の促進
 * 設計
 ** レイヤードアーキテクチャ＋ドメイン駆動設計
 ** モジュラモノリス
 ** 腐敗防止層
 ** テストのバランス是正
 * 途中経過
 * 最後に

== 請求管理機能の状況

請求管理機能は登降園の打刻時間や利用した食事の実績を元にして、保護者への請求を作成する機能です。

ビジネスルールが複雑で計算のパターンも多いためコードベースも大きく、また機能追加が断続的に繰り返されたことで複雑度が高まりメンテナンスコストが増大しています。

テストスイートはバランスが悪く、膨大な手動テストと部分的な E2E テスト・インテグレーションテストによって品質保証が行われており、アイスクリームコーン型アンチパターン@<fn>{2}に近い構成となってしまっていました。

//image[antipatern][アイスクリームコーン型アンチパターン][scale=0.5]

またデータベースのテーブル設計にも問題があり、長期的な保守を考えると是正が必要な状況です。

== リプレイスに向けた作戦

=== 一旦モジュラモノリスを目指す

前述の通りコードの複雑度が高く、またチーム発足時はビジネスドメインに対する理解が十分とはいえない状態@<fn>{3}、かつ仕様的な面でも一旦整理が必要で、このような状況でリプレイスに踏み切るのはリスクが高いと考えていました。

そのため、一旦は既存のリポジトリの中でリファクタリングを行ってドメイン間の依存関係を整理し、また将来的にマイクロサービスとして切り出す可能性も見据えてモジュラモノリスを目指すこととしました。

このようにすることでビジネスロジックを新たに実装し直すことができ、なおかつ同時並行で既存機能のメンテナンスも行えると考えたからです。フレームワークや実行環境については既存の資産を活用することができるため、コードの問題に集中できるというメリットもあります。

=== チーム内での知見の共有、議論の促進

チーム発足時はドメインの知識も設計への理解も不足している状態でした。そこでモブプログラミングやペアプログラミングを増やして、設計についての共通認識を作りつつ、議論を促進して、よりよい最適な設計に向かえるようにしました。
またこれよりも前の段階で、先々を見据えてドメイン図の作成を実施していたことが設計や議論の役に立ちました。

== 設計

=== レイヤードアーキテクチャ＋ドメイン駆動設計

Clean Architecture を参考にしたレイヤードアーキテクチャとドメイン駆動設計を採用しました。ビジネスロジックが複雑でメンテナンスも長期間に渡るため、変化に強く可読性が高い設計としたかったことが理由です。
先行するリプレイスプロジェクトで採用されていたため、社内の経験者から助言を受けつつ進められるというのも理由の一つでした。

=== モジュラモノリス

一旦機能ごとのまとまりをドメインの境界@<fn>{4}とみなし、ドメインの境界を超える場合は各ドメインが提供する公開 API を通すルールとしました。
こうすることで各ドメインの独立性が高まり、また分散していたコードも徐々に集約されていきます。

//image[monorith][モジュラーモノリスと公開APIの概念図][scale=0.5]

=== 腐敗防止層

既存のコードから取得した情報は腐敗防止層で変換するか、プロキシ的なクラスを置くことでリファクタ後のロジックが影響を受けないように配慮しました。DB についてもアンチパターンを踏んでいるものは将来的に是正が必要になるため、インターフェース層に Translator と呼んでいる独立した変換クラスを配置する形にしました。

=== テストのバランス是正

ユニットテスト＞インテグレーションテスト＞ E2E テスト というバランスになるように徐々に是正することを目指します。実行速度が早いユニットテストをもっとも厚く作成して、ここでカバーできない内容をインテグレーションテストで保証するような方針としました。
実装においては TDD を導入してテストファーストを基本方針としましたが、ユニットテストについてはカバレッジ 100％を目指さず、モックによる効果の薄いテストに時間をかけるよりはインテグレーションテストや E2E テストで保証する方針としました。

== 途中経過

一旦既存リポジトリの中でリファクタリングを実施することで、比較的少ない工数で機能改善しやすい状況を作ることができました。

新たに書き直したドメイン層のビジネスロジックはテストによる品質保証が可能な状態になり、可読性も変更容易性も向上しました。コードの品質向上はその後の不具合修正で証明がされました。
また、この先リプレイスして開発言語が変わってもドメイン層のビジネスロジックはそのまま使用できるため、今後の資産となります。将来につながる資産を実装しているという実感がエンジニアのモチベーションにもつながったように思います。

モブプロ、ペアプロを推進したことで設計やドメイン知識の共有が進み、業務の中で設計や進め方に関する議論が頻繁に行われる状況が作られました。

自動テストは拡充を進めていますが、まだまだ不十分で手動テストが多く残ってしまっています@<fn>{5}。自動テストの拡充とバランスの是正が今後の課題です。

== 最後に

取り組みを始めた頃は十分な知見もなく不確実性の高い手探り状態でしたが、チーム内外からの助言と議論を通して徐々に正しい方向に向かえるようになってきたと思います。
すべての問題を一度に解決するのは困難で、解決策についても十分な知見があるとは限らないため、正しい方向に向かえるよう議論を絶やさず、徐々に軌道修正するのがよさそうに思えます。現在のところはこのやり方が上手くいっているように感じます。

ソフトウェア開発とはチームによる取り組みであるため @<fn>{6}、知識を共有し議論を促進することで、誤りを正してよりよい方向に向かえると考えています。

== コドモンについて

「子どもを取り巻く環境をテクノロジーの力でよりよいものに」をミッションに、子どもや子どもの周りで働く大人と社会の抱える課題解決を目指して事業を展開しています。

主力プロダクトであるこども施設向けの ICT システム「CoDMON(コドモン)」の他にも、業界課題に根付ざしたサービスを複数展開しています。保育者の採用支援サービス「hoicil(ホイシル)」やオンライン研修サービス「CoDMON カレッジ」、保育用品の EC 事業サービス「CoDMON ストア」など、こども施設の運営および地域に必要とされ続けるための支援を続け、保育業界全体への貢献を目指します！

一緒に働く仲間も絶賛募集中ですので、コドモンの事業や取り組みに興味を持っていただいた方は、採用 HP や開発チームブログをご覧ください！

 * 採用 HP： https://www.codmon.co.jp/recruit/
 * 開発チームブログ： https://tech.codmon.com/

//footnote[1][登降園管理機能は園児の登園・降園時刻の予定と実績を管理する機能です。請求管理機能との関係が深いため現在は一つのチームで担当しています。請求管理機能については本文をご覧ください]
//footnote[2][手動テストと E2E テストで品質保証の大部分が行われ、インテグレーションテストやユニットテストはほとんど書かれない。速度が遅く信頼性も低くなるテストのアンチパターン]
//footnote[3][ユーザー数の急増に対応するためエンジニアの採用を進めており、それに伴いビジネスドメインに詳しいエンジニア層が相対的に少なくなってしまっていました]
//footnote[4][一つのモデルを共有できる境界。境界づけられたコンテキスト。エリック・エヴァンスのドメイン駆動設計から]
//footnote[5][正直に言えば工数と期限の問題でユニットテストは十分に作成することができませんでした...やむを得ない状況とはいえ若干後悔が残りました]
//footnote[6][Google のソフトウェアエンジニアリング 2 章から「本章において決定的に重要な考え方は、ソフトウェア開発はチームによる取り組みであるということだ。」]

　

　

//embed{
    \begin{minipage}{.1\linewidth}
        \centering
        \includegraphics[width=.75\linewidth]{images/contributors/codmon-takahashi.jpg}
    \end{minipage}
    \begin{minipage}{.89\linewidth}
		高橋 宗弘\\
		株式会社　コドモン
    \end{minipage}
    \hspace{1ex}
//}
2019年にコドモンにエンジニアとして入社。技術的負債と向き合う日々。最近は個人開発でFlutterを触っています。